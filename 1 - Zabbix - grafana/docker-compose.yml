version: '3.8'

networks:
  frontend-net:
    driver: bridge
    ipam:
      config:
        - subnet: ${FRONTEND_SUBNET}
  backend-net:
    driver: bridge
    ipam:
      config:
        - subnet: ${BACKEND_SUBNET}
  db-net:
    driver: bridge
    ipam:
      config:
        - subnet: ${DB_SUBNET}

volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/postgresql
      o: bind
    name: postgres-data
    labels:
      com.docker.volume.quota: "${POSTGRES_VOLUME_SIZE}G"

  zabbix-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/zabbix
      o: bind
    name: zabbix-data
    labels:
      com.docker.volume.quota: "${ZABBIX_VOLUME_SIZE}G"

  grafana-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/grafana
      o: bind
    name: grafana-data
    labels:
      com.docker.volume.quota: "${GRAFANA_VOLUME_SIZE}G"

services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '${POSTGRES_CPU_LIMIT}'
          memory: ${POSTGRES_MEMORY_LIMIT}M
        reservations:
          memory: ${POSTGRES_MEMORY_RESERVATION}M
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - db-net
    ports:
      - "${POSTGRES_PORT}:5432"
    command: 
      - "postgres"
      - "-c"
      - "max_connections=1000"
      - "-c"
      - "shared_buffers=256MB"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  zabbix-server:
    image: zabbix/zabbix-server-pgsql:7.0-ubuntu-latest
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '${ZABBIX_SERVER_CPU_LIMIT}'
          memory: ${ZABBIX_SERVER_MEMORY_LIMIT}M
        reservations:
          memory: ${ZABBIX_SERVER_MEMORY_RESERVATION}M
    environment:
      DB_SERVER_HOST: ${POSTGRES_HOST}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      ZBX_TIMEOUT: ${ZBX_TIMEOUT}
    ports:
      - "${ZABBIX_SERVER_PORT}:10051"
    volumes:
      - zabbix-data:/var/lib/zabbix
      - /etc/localtime:/etc/localtime:ro
      - ./zbx_env/usr/lib/zabbix/alertscripts:/usr/lib/zabbix/alertscripts:ro
      - ./zbx_env/usr/lib/zabbix/externalscripts:/usr/lib/zabbix/externalscripts:ro
      - ./zbx_env/var/lib/zabbix/export:/var/lib/zabbix/export:rw
      - ./zbx_env/var/lib/zabbix/modules:/var/lib/zabbix/modules:ro
      - ./zbx_env/var/lib/zabbix/enc:/var/lib/zabbix/enc:ro
      - ./zbx_env/var/lib/zabbix/ssh_keys:/usr/lib/zabbix/ssh_keys:ro
      - ./zbx_env/var/lib/zabbix/mibs:/usr/lib/zabbix/mibs:ro
    networks:
      - backend-net
      - db-net

  zabbix-web:
    image: zabbix/zabbix-web-nginx-pgsql:7.0-ubuntu-latest
    restart: unless-stopped
    depends_on:
      - postgres
      - zabbix-server
    deploy:
      resources:
        limits:
          cpus: '${ZABBIX_WEB_CPU_LIMIT}'
          memory: ${ZABBIX_WEB_MEMORY_LIMIT}M
        reservations:
          memory: ${ZABBIX_WEB_MEMORY_RESERVATION}M
    environment:
      DB_SERVER_HOST: ${POSTGRES_HOST}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      ZBX_SERVER_HOST: ${ZABBIX_SERVER_HOST}
      PHP_TZ: ${PHP_TZ}
    ports:
      - "${ZABBIX_WEB_HTTP_PORT}:8080"
      - "${ZABBIX_WEB_HTTPS_PORT}:8443"
    networks:
      - frontend-net
      - backend-net
      - db-net

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    depends_on:
      - postgres
      - zabbix-server
    deploy:
      resources:
        limits:
          cpus: '${GRAFANA_CPU_LIMIT}'
          memory: ${GRAFANA_MEMORY_LIMIT}M
        reservations:
          memory: ${GRAFANA_MEMORY_RESERVATION}M
    environment:
      GF_INSTALL_PLUGINS: ${GRAFANA_PLUGINS}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - frontend-net
      - backend-net